from django.db import models
from django.core.exceptions import ValidationError


class AllPurpose(models.Model):
    name = models.CharField(max_length=100, unique=True)
    created_by = models.IntegerField()
    created_at = models.DateTimeField(auto_now_add=True)

    def _str_(self):
        return self.name

class ClientPurpose(models.Model):
    client_id = models.IntegerField()  # This can be user id, org id, or company id (as per your architecture)
    purpose = models.ForeignKey(AllPurpose, on_delete=models.CASCADE, related_name='client_purposes')
    assigned_by = models.IntegerField()
    assigned_at = models.DateTimeField(auto_now_add=True)
    delete=models.BooleanField(default=False)

    def _str_(self):
        return f"Client {self.client_id} - {self.purpose.name}"


class Project(models.Model):
    name = models.CharField(max_length=100)
    organization_id = models.IntegerField(null=False, blank=False)  
    company_id = models.IntegerField(null=True, blank=True)       
    entity_id = models.IntegerField(null=True, blank=True)        
    image = models.ImageField(upload_to='project_images/', default='project_images/Project.png')
    created_by = models.IntegerField() 

    def clean(self):
        owners = [self.organization_id, self.company_id, self.entity_id]
        if sum(bool(owner) for owner in owners) < 1:
            raise ValidationError('At least one of organization_id, company_id, or entity_id must be set.')

    def __str__(self):
        return f"{self.name} (Org: {self.organization_id}, Co: {self.company_id}, Ent: {self.entity_id})"

class Purpose(models.Model):
    project = models.ForeignKey(Project, on_delete=models.CASCADE)
    name = models.ForeignKey(ClientPurpose,on_delete=models.CASCADE, related_name='purposes')
    is_active = models.BooleanField(default=True)

    # class Meta:
    #     unique_together = ('project', 'purpose')

    def __str__(self):
        return f"{self.project.name}  {self.name}"


class Phase(models.Model):
    project = models.ForeignKey(Project, on_delete=models.CASCADE, related_name='phases')
    purpose = models.ForeignKey(Purpose, on_delete=models.CASCADE, related_name='phases')
    name = models.CharField(max_length=100)
    is_active = models.BooleanField(default=True)

    def __str__(self):
        return f"{self.project.name} - {self.name}"

class Stage(models.Model):
    project=models.ForeignKey(Project,on_delete=models.CASCADE)
    purpose=models.ForeignKey(Purpose,on_delete=models.CASCADE)
    phase = models.ForeignKey(Phase, on_delete=models.CASCADE, related_name='stages')
    name = models.CharField(max_length=100)
    sequence = models.PositiveIntegerField(default=1)
    is_active = models.BooleanField(default=True)

    def __str__(self):
        return f"{self.phase.name} - {self.name}"

class Building(models.Model):
    name = models.CharField(max_length=100)
    project = models.ForeignKey(Project, on_delete=models.CASCADE)


    def __str__(self):
        return f"{self.project.name} - {self.name}"

class Level(models.Model):
    name = models.CharField(max_length=20, null=False, blank=False)
    building = models.ForeignKey(Building, on_delete=models.CASCADE)

    class meta:
        unique_together=('name','building')

    def __str__(self):
        return f"{self.building.name} - {self.name}"


class Zone(models.Model):
    building = models.ForeignKey(Building, on_delete=models.CASCADE)
    level = models.ForeignKey(Level, on_delete=models.CASCADE)
    name = models.CharField(max_length=100)

    def __str__(self):
        return f"{self.building.name} - {self.name}"


class Subzone(models.Model):
    zone = models.ForeignKey('Zone', on_delete=models.CASCADE, related_name='subzones')
    name = models.CharField(max_length=100)

    def __str__(self):
        return f"{self.zone.name} - {self.name}"

    
class Rooms(models.Model):
    Project=models.ForeignKey(Project,max_length=50,null=False,on_delete=models.CASCADE,blank=False)
    rooms = models.CharField(max_length=200, null=False, blank=False)


class Flattype(models.Model):
    project = models.ForeignKey(Project, on_delete=models.CASCADE)
    type_name = models.CharField(max_length=10)
    rooms = models.ManyToManyField(Rooms, related_name="flattypes")

    def __str__(self):
        return f"{self.type_name} ({self.rooms})"

FLAT_STATUS_CHOICES = [
    ('PLANNED', 'Planned'),
    ('AVAILABLE', 'Available'),
    ('BOOKED', 'Booked'),
    ('OCCUPIED', 'Occupied'),
    ('UNDER_CONSTRUCTION', 'Under Construction'),
    ('INACTIVE', 'Inactive'),
]    

class Flat(models.Model):
    project=models.ForeignKey(Project,on_delete=models.CASCADE)
    building = models.ForeignKey(Building, on_delete=models.CASCADE, null=True, blank=True)
    level = models.ForeignKey(Level, on_delete=models.CASCADE)
    flattype = models.ForeignKey(Flattype, on_delete=models.SET_NULL, null=True)
    number = models.CharField(max_length=20)
    zone = models.ForeignKey('Zone', on_delete=models.SET_NULL, null=True, blank=True)
    subzone = models.ForeignKey('Subzone', on_delete=models.SET_NULL, null=True, blank=True)
    status=models.CharField(max_length=30, choices=FLAT_STATUS_CHOICES,default='PLANNED',  )
    def __str__(self):
        building_name = self.building.name if self.building else "No Building"
        zone_name = self.zone.name if self.zone else "No Zone"
        subzone_name = self.subzone.name if self.subzone else "No Subzone"
        return f"Flat {self.number} in {building_name} - {zone_name} - {subzone_name}"


class Category(models.Model):
    project = models.ForeignKey(Project, null=False, on_delete=models.CASCADE)
    name = models.CharField(max_length=40, null=False, blank=False)
    created_by = models.IntegerField(null=True, blank=True)
    

class CategoryLevel1(models.Model):
    category = models.ForeignKey(Category, null=False, on_delete=models.CASCADE, related_name='level1')
    name = models.CharField(max_length=40, null=False, blank=False)
    created_by = models.IntegerField(null=True, blank=True)

class CategoryLevel2(models.Model):
    category_level1 = models.ForeignKey(CategoryLevel1, null=False, on_delete=models.CASCADE, related_name='level2')
    name = models.CharField(max_length=40, null=False, blank=False)
    created_by = models.IntegerField(null=True, blank=True)

class CategoryLevel3(models.Model):
    category_level2 = models.ForeignKey(CategoryLevel2, null=False, on_delete=models.CASCADE, related_name='level3')
    name = models.CharField(max_length=40, null=False, blank=False)
    created_by = models.IntegerField(null=True, blank=True)

class CategoryLevel4(models.Model):
    category_level3 = models.ForeignKey(CategoryLevel3, null=False, on_delete=models.CASCADE, related_name='level4')
    name = models.CharField(max_length=40, null=False, blank=False)
    created_by = models.IntegerField(null=True, blank=True)


class CategoryLevel5(models.Model):
    category_level4 = models.ForeignKey(CategoryLevel4, null=False, on_delete=models.CASCADE, related_name='level5')
    name = models.CharField(max_length=40, null=False, blank=False)
    created_by = models.IntegerField(null=True, blank=True)

class CategoryLevel6(models.Model):
    category_level5 = models.ForeignKey(CategoryLevel5, null=False, on_delete=models.CASCADE, related_name='level6')
    name = models.CharField(max_length=40, null=False, blank=False)
    created_by = models.IntegerField(null=True, blank=True)

class TransferRule(models.Model):
    project = models.OneToOneField(Project, on_delete=models.CASCADE, related_name='transfer_rule')
    flat_level = models.BooleanField(default=True)
    room_level = models.BooleanField(default=False)
    checklist_level = models.BooleanField(default=False)
    question_level = models.BooleanField(default=False)
    Zone_level = models.BooleanField(default=False)

    def __str__(self):
        return f"TransferRule for {self.project.name}"


